// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

import 'api.dart';
import 'frb_generated.dart';
import 'lib.dart';
import 'renderer.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPeerConnectionPtr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_ArcPeerConnectionPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcRtpEncodingParametersPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ArcRtpEncodingParametersPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcRtpParametersPtr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_ArcRtpParametersPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcRtpTransceiverPtr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_ArcRtpTransceiverPtr;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  ArcPeerConnection dco_decode_RustOpaque_ArcPeerConnection(dynamic raw);

  @protected
  ArcRtpEncodingParameters dco_decode_RustOpaque_ArcRtpEncodingParameters(
      dynamic raw);

  @protected
  ArcRtpParameters dco_decode_RustOpaque_ArcRtpParameters(dynamic raw);

  @protected
  ArcRtpTransceiver dco_decode_RustOpaque_ArcRtpTransceiver(dynamic raw);

  @protected
  RustStreamSink<PeerConnectionEvent>
      dco_decode_StreamSink_peer_connection_event_Sse(dynamic raw);

  @protected
  RustStreamSink<TextureEvent> dco_decode_StreamSink_texture_event_Sse(
      dynamic raw);

  @protected
  RustStreamSink<TrackEvent> dco_decode_StreamSink_track_event_Sse(dynamic raw);

  @protected
  RustStreamSink<void> dco_decode_StreamSink_unit_Sse(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AudioConstraints dco_decode_audio_constraints(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AudioConstraints dco_decode_box_autoadd_audio_constraints(dynamic raw);

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw);

  @protected
  GetMediaError dco_decode_box_autoadd_get_media_error(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw);

  @protected
  IceCandidateStats dco_decode_box_autoadd_ice_candidate_stats(dynamic raw);

  @protected
  IceRole dco_decode_box_autoadd_ice_role(dynamic raw);

  @protected
  MediaStreamConstraints dco_decode_box_autoadd_media_stream_constraints(
      dynamic raw);

  @protected
  Protocol dco_decode_box_autoadd_protocol(dynamic raw);

  @protected
  RtcConfiguration dco_decode_box_autoadd_rtc_configuration(dynamic raw);

  @protected
  RtcIceCandidateStats dco_decode_box_autoadd_rtc_ice_candidate_stats(
      dynamic raw);

  @protected
  RtcInboundRtpStreamMediaType
      dco_decode_box_autoadd_rtc_inbound_rtp_stream_media_type(dynamic raw);

  @protected
  RtcMediaSourceStatsMediaType
      dco_decode_box_autoadd_rtc_media_source_stats_media_type(dynamic raw);

  @protected
  RtcOutboundRtpStreamStatsMediaType
      dco_decode_box_autoadd_rtc_outbound_rtp_stream_stats_media_type(
          dynamic raw);

  @protected
  RtcRtpSendParameters dco_decode_box_autoadd_rtc_rtp_send_parameters(
      dynamic raw);

  @protected
  RtcTrackEvent dco_decode_box_autoadd_rtc_track_event(dynamic raw);

  @protected
  RtcpFeedbackMessageType dco_decode_box_autoadd_rtcp_feedback_message_type(
      dynamic raw);

  @protected
  RtpTransceiverInit dco_decode_box_autoadd_rtp_transceiver_init(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  VideoConstraints dco_decode_box_autoadd_video_constraints(dynamic raw);

  @protected
  BundlePolicy dco_decode_bundle_policy(dynamic raw);

  @protected
  CandidateType dco_decode_candidate_type(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  GetMediaError dco_decode_get_media_error(dynamic raw);

  @protected
  GetMediaResult dco_decode_get_media_result(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  IceCandidateStats dco_decode_ice_candidate_stats(dynamic raw);

  @protected
  IceConnectionState dco_decode_ice_connection_state(dynamic raw);

  @protected
  IceGatheringState dco_decode_ice_gathering_state(dynamic raw);

  @protected
  IceRole dco_decode_ice_role(dynamic raw);

  @protected
  IceTransportsType dco_decode_ice_transports_type(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<MediaDeviceInfo> dco_decode_list_media_device_info(dynamic raw);

  @protected
  List<MediaDisplayInfo> dco_decode_list_media_display_info(dynamic raw);

  @protected
  List<MediaStreamTrack> dco_decode_list_media_stream_track(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<(RtcRtpEncodingParameters, ArcRtpEncodingParameters)>
      dco_decode_list_record_rtc_rtp_encoding_parameters_rust_opaque_arc_rtp_encoding_parameters(
          dynamic raw);

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw);

  @protected
  List<RtcIceServer> dco_decode_list_rtc_ice_server(dynamic raw);

  @protected
  List<RtcRtpEncodingParameters> dco_decode_list_rtc_rtp_encoding_parameters(
      dynamic raw);

  @protected
  List<RtcRtpTransceiver> dco_decode_list_rtc_rtp_transceiver(dynamic raw);

  @protected
  List<RtcStats> dco_decode_list_rtc_stats(dynamic raw);

  @protected
  List<RtcpFeedback> dco_decode_list_rtcp_feedback(dynamic raw);

  @protected
  List<RtpCodecCapability> dco_decode_list_rtp_codec_capability(dynamic raw);

  @protected
  List<RtpHeaderExtensionCapability>
      dco_decode_list_rtp_header_extension_capability(dynamic raw);

  @protected
  List<ScalabilityMode> dco_decode_list_scalability_mode(dynamic raw);

  @protected
  List<VideoCodecInfo> dco_decode_list_video_codec_info(dynamic raw);

  @protected
  MediaDeviceInfo dco_decode_media_device_info(dynamic raw);

  @protected
  MediaDeviceKind dco_decode_media_device_kind(dynamic raw);

  @protected
  MediaDisplayInfo dco_decode_media_display_info(dynamic raw);

  @protected
  MediaStreamConstraints dco_decode_media_stream_constraints(dynamic raw);

  @protected
  MediaStreamTrack dco_decode_media_stream_track(dynamic raw);

  @protected
  MediaType dco_decode_media_type(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  AudioConstraints? dco_decode_opt_box_autoadd_audio_constraints(dynamic raw);

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw);

  @protected
  IceRole? dco_decode_opt_box_autoadd_ice_role(dynamic raw);

  @protected
  Protocol? dco_decode_opt_box_autoadd_protocol(dynamic raw);

  @protected
  RtcInboundRtpStreamMediaType?
      dco_decode_opt_box_autoadd_rtc_inbound_rtp_stream_media_type(dynamic raw);

  @protected
  RtcpFeedbackMessageType?
      dco_decode_opt_box_autoadd_rtcp_feedback_message_type(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  VideoConstraints? dco_decode_opt_box_autoadd_video_constraints(dynamic raw);

  @protected
  PeerConnectionEvent dco_decode_peer_connection_event(dynamic raw);

  @protected
  PeerConnectionState dco_decode_peer_connection_state(dynamic raw);

  @protected
  Protocol dco_decode_protocol(dynamic raw);

  @protected
  (
    RtcRtpEncodingParameters,
    ArcRtpEncodingParameters
  ) dco_decode_record_rtc_rtp_encoding_parameters_rust_opaque_arc_rtp_encoding_parameters(
      dynamic raw);

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw);

  @protected
  RtcConfiguration dco_decode_rtc_configuration(dynamic raw);

  @protected
  RtcIceCandidateStats dco_decode_rtc_ice_candidate_stats(dynamic raw);

  @protected
  RtcIceServer dco_decode_rtc_ice_server(dynamic raw);

  @protected
  RtcInboundRtpStreamMediaType dco_decode_rtc_inbound_rtp_stream_media_type(
      dynamic raw);

  @protected
  RtcMediaSourceStatsMediaType dco_decode_rtc_media_source_stats_media_type(
      dynamic raw);

  @protected
  RtcOutboundRtpStreamStatsMediaType
      dco_decode_rtc_outbound_rtp_stream_stats_media_type(dynamic raw);

  @protected
  RtcRtpEncodingParameters dco_decode_rtc_rtp_encoding_parameters(dynamic raw);

  @protected
  RtcRtpSendParameters dco_decode_rtc_rtp_send_parameters(dynamic raw);

  @protected
  RtcRtpTransceiver dco_decode_rtc_rtp_transceiver(dynamic raw);

  @protected
  RtcSessionDescription dco_decode_rtc_session_description(dynamic raw);

  @protected
  RtcStats dco_decode_rtc_stats(dynamic raw);

  @protected
  RtcStatsIceCandidatePairState dco_decode_rtc_stats_ice_candidate_pair_state(
      dynamic raw);

  @protected
  RtcStatsType dco_decode_rtc_stats_type(dynamic raw);

  @protected
  RtcTrackEvent dco_decode_rtc_track_event(dynamic raw);

  @protected
  RtcpFeedback dco_decode_rtcp_feedback(dynamic raw);

  @protected
  RtcpFeedbackMessageType dco_decode_rtcp_feedback_message_type(dynamic raw);

  @protected
  RtcpFeedbackType dco_decode_rtcp_feedback_type(dynamic raw);

  @protected
  RtpCapabilities dco_decode_rtp_capabilities(dynamic raw);

  @protected
  RtpCodecCapability dco_decode_rtp_codec_capability(dynamic raw);

  @protected
  RtpHeaderExtensionCapability dco_decode_rtp_header_extension_capability(
      dynamic raw);

  @protected
  RtpTransceiverDirection dco_decode_rtp_transceiver_direction(dynamic raw);

  @protected
  RtpTransceiverInit dco_decode_rtp_transceiver_init(dynamic raw);

  @protected
  ScalabilityMode dco_decode_scalability_mode(dynamic raw);

  @protected
  SdpType dco_decode_sdp_type(dynamic raw);

  @protected
  SignalingState dco_decode_signaling_state(dynamic raw);

  @protected
  TextureEvent dco_decode_texture_event(dynamic raw);

  @protected
  TrackEvent dco_decode_track_event(dynamic raw);

  @protected
  TrackState dco_decode_track_state(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  VideoCodec dco_decode_video_codec(dynamic raw);

  @protected
  VideoCodecInfo dco_decode_video_codec_info(dynamic raw);

  @protected
  VideoConstraints dco_decode_video_constraints(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  ArcPeerConnection sse_decode_RustOpaque_ArcPeerConnection(
      SseDeserializer deserializer);

  @protected
  ArcRtpEncodingParameters sse_decode_RustOpaque_ArcRtpEncodingParameters(
      SseDeserializer deserializer);

  @protected
  ArcRtpParameters sse_decode_RustOpaque_ArcRtpParameters(
      SseDeserializer deserializer);

  @protected
  ArcRtpTransceiver sse_decode_RustOpaque_ArcRtpTransceiver(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<PeerConnectionEvent>
      sse_decode_StreamSink_peer_connection_event_Sse(
          SseDeserializer deserializer);

  @protected
  RustStreamSink<TextureEvent> sse_decode_StreamSink_texture_event_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<TrackEvent> sse_decode_StreamSink_track_event_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<void> sse_decode_StreamSink_unit_Sse(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AudioConstraints sse_decode_audio_constraints(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AudioConstraints sse_decode_box_autoadd_audio_constraints(
      SseDeserializer deserializer);

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer);

  @protected
  GetMediaError sse_decode_box_autoadd_get_media_error(
      SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  IceCandidateStats sse_decode_box_autoadd_ice_candidate_stats(
      SseDeserializer deserializer);

  @protected
  IceRole sse_decode_box_autoadd_ice_role(SseDeserializer deserializer);

  @protected
  MediaStreamConstraints sse_decode_box_autoadd_media_stream_constraints(
      SseDeserializer deserializer);

  @protected
  Protocol sse_decode_box_autoadd_protocol(SseDeserializer deserializer);

  @protected
  RtcConfiguration sse_decode_box_autoadd_rtc_configuration(
      SseDeserializer deserializer);

  @protected
  RtcIceCandidateStats sse_decode_box_autoadd_rtc_ice_candidate_stats(
      SseDeserializer deserializer);

  @protected
  RtcInboundRtpStreamMediaType
      sse_decode_box_autoadd_rtc_inbound_rtp_stream_media_type(
          SseDeserializer deserializer);

  @protected
  RtcMediaSourceStatsMediaType
      sse_decode_box_autoadd_rtc_media_source_stats_media_type(
          SseDeserializer deserializer);

  @protected
  RtcOutboundRtpStreamStatsMediaType
      sse_decode_box_autoadd_rtc_outbound_rtp_stream_stats_media_type(
          SseDeserializer deserializer);

  @protected
  RtcRtpSendParameters sse_decode_box_autoadd_rtc_rtp_send_parameters(
      SseDeserializer deserializer);

  @protected
  RtcTrackEvent sse_decode_box_autoadd_rtc_track_event(
      SseDeserializer deserializer);

  @protected
  RtcpFeedbackMessageType sse_decode_box_autoadd_rtcp_feedback_message_type(
      SseDeserializer deserializer);

  @protected
  RtpTransceiverInit sse_decode_box_autoadd_rtp_transceiver_init(
      SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  VideoConstraints sse_decode_box_autoadd_video_constraints(
      SseDeserializer deserializer);

  @protected
  BundlePolicy sse_decode_bundle_policy(SseDeserializer deserializer);

  @protected
  CandidateType sse_decode_candidate_type(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  GetMediaError sse_decode_get_media_error(SseDeserializer deserializer);

  @protected
  GetMediaResult sse_decode_get_media_result(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  IceCandidateStats sse_decode_ice_candidate_stats(
      SseDeserializer deserializer);

  @protected
  IceConnectionState sse_decode_ice_connection_state(
      SseDeserializer deserializer);

  @protected
  IceGatheringState sse_decode_ice_gathering_state(
      SseDeserializer deserializer);

  @protected
  IceRole sse_decode_ice_role(SseDeserializer deserializer);

  @protected
  IceTransportsType sse_decode_ice_transports_type(
      SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<MediaDeviceInfo> sse_decode_list_media_device_info(
      SseDeserializer deserializer);

  @protected
  List<MediaDisplayInfo> sse_decode_list_media_display_info(
      SseDeserializer deserializer);

  @protected
  List<MediaStreamTrack> sse_decode_list_media_stream_track(
      SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<(RtcRtpEncodingParameters, ArcRtpEncodingParameters)>
      sse_decode_list_record_rtc_rtp_encoding_parameters_rust_opaque_arc_rtp_encoding_parameters(
          SseDeserializer deserializer);

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer);

  @protected
  List<RtcIceServer> sse_decode_list_rtc_ice_server(
      SseDeserializer deserializer);

  @protected
  List<RtcRtpEncodingParameters> sse_decode_list_rtc_rtp_encoding_parameters(
      SseDeserializer deserializer);

  @protected
  List<RtcRtpTransceiver> sse_decode_list_rtc_rtp_transceiver(
      SseDeserializer deserializer);

  @protected
  List<RtcStats> sse_decode_list_rtc_stats(SseDeserializer deserializer);

  @protected
  List<RtcpFeedback> sse_decode_list_rtcp_feedback(
      SseDeserializer deserializer);

  @protected
  List<RtpCodecCapability> sse_decode_list_rtp_codec_capability(
      SseDeserializer deserializer);

  @protected
  List<RtpHeaderExtensionCapability>
      sse_decode_list_rtp_header_extension_capability(
          SseDeserializer deserializer);

  @protected
  List<ScalabilityMode> sse_decode_list_scalability_mode(
      SseDeserializer deserializer);

  @protected
  List<VideoCodecInfo> sse_decode_list_video_codec_info(
      SseDeserializer deserializer);

  @protected
  MediaDeviceInfo sse_decode_media_device_info(SseDeserializer deserializer);

  @protected
  MediaDeviceKind sse_decode_media_device_kind(SseDeserializer deserializer);

  @protected
  MediaDisplayInfo sse_decode_media_display_info(SseDeserializer deserializer);

  @protected
  MediaStreamConstraints sse_decode_media_stream_constraints(
      SseDeserializer deserializer);

  @protected
  MediaStreamTrack sse_decode_media_stream_track(SseDeserializer deserializer);

  @protected
  MediaType sse_decode_media_type(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  AudioConstraints? sse_decode_opt_box_autoadd_audio_constraints(
      SseDeserializer deserializer);

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  IceRole? sse_decode_opt_box_autoadd_ice_role(SseDeserializer deserializer);

  @protected
  Protocol? sse_decode_opt_box_autoadd_protocol(SseDeserializer deserializer);

  @protected
  RtcInboundRtpStreamMediaType?
      sse_decode_opt_box_autoadd_rtc_inbound_rtp_stream_media_type(
          SseDeserializer deserializer);

  @protected
  RtcpFeedbackMessageType?
      sse_decode_opt_box_autoadd_rtcp_feedback_message_type(
          SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  VideoConstraints? sse_decode_opt_box_autoadd_video_constraints(
      SseDeserializer deserializer);

  @protected
  PeerConnectionEvent sse_decode_peer_connection_event(
      SseDeserializer deserializer);

  @protected
  PeerConnectionState sse_decode_peer_connection_state(
      SseDeserializer deserializer);

  @protected
  Protocol sse_decode_protocol(SseDeserializer deserializer);

  @protected
  (
    RtcRtpEncodingParameters,
    ArcRtpEncodingParameters
  ) sse_decode_record_rtc_rtp_encoding_parameters_rust_opaque_arc_rtp_encoding_parameters(
      SseDeserializer deserializer);

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer);

  @protected
  RtcConfiguration sse_decode_rtc_configuration(SseDeserializer deserializer);

  @protected
  RtcIceCandidateStats sse_decode_rtc_ice_candidate_stats(
      SseDeserializer deserializer);

  @protected
  RtcIceServer sse_decode_rtc_ice_server(SseDeserializer deserializer);

  @protected
  RtcInboundRtpStreamMediaType sse_decode_rtc_inbound_rtp_stream_media_type(
      SseDeserializer deserializer);

  @protected
  RtcMediaSourceStatsMediaType sse_decode_rtc_media_source_stats_media_type(
      SseDeserializer deserializer);

  @protected
  RtcOutboundRtpStreamStatsMediaType
      sse_decode_rtc_outbound_rtp_stream_stats_media_type(
          SseDeserializer deserializer);

  @protected
  RtcRtpEncodingParameters sse_decode_rtc_rtp_encoding_parameters(
      SseDeserializer deserializer);

  @protected
  RtcRtpSendParameters sse_decode_rtc_rtp_send_parameters(
      SseDeserializer deserializer);

  @protected
  RtcRtpTransceiver sse_decode_rtc_rtp_transceiver(
      SseDeserializer deserializer);

  @protected
  RtcSessionDescription sse_decode_rtc_session_description(
      SseDeserializer deserializer);

  @protected
  RtcStats sse_decode_rtc_stats(SseDeserializer deserializer);

  @protected
  RtcStatsIceCandidatePairState sse_decode_rtc_stats_ice_candidate_pair_state(
      SseDeserializer deserializer);

  @protected
  RtcStatsType sse_decode_rtc_stats_type(SseDeserializer deserializer);

  @protected
  RtcTrackEvent sse_decode_rtc_track_event(SseDeserializer deserializer);

  @protected
  RtcpFeedback sse_decode_rtcp_feedback(SseDeserializer deserializer);

  @protected
  RtcpFeedbackMessageType sse_decode_rtcp_feedback_message_type(
      SseDeserializer deserializer);

  @protected
  RtcpFeedbackType sse_decode_rtcp_feedback_type(SseDeserializer deserializer);

  @protected
  RtpCapabilities sse_decode_rtp_capabilities(SseDeserializer deserializer);

  @protected
  RtpCodecCapability sse_decode_rtp_codec_capability(
      SseDeserializer deserializer);

  @protected
  RtpHeaderExtensionCapability sse_decode_rtp_header_extension_capability(
      SseDeserializer deserializer);

  @protected
  RtpTransceiverDirection sse_decode_rtp_transceiver_direction(
      SseDeserializer deserializer);

  @protected
  RtpTransceiverInit sse_decode_rtp_transceiver_init(
      SseDeserializer deserializer);

  @protected
  ScalabilityMode sse_decode_scalability_mode(SseDeserializer deserializer);

  @protected
  SdpType sse_decode_sdp_type(SseDeserializer deserializer);

  @protected
  SignalingState sse_decode_signaling_state(SseDeserializer deserializer);

  @protected
  TextureEvent sse_decode_texture_event(SseDeserializer deserializer);

  @protected
  TrackEvent sse_decode_track_event(SseDeserializer deserializer);

  @protected
  TrackState sse_decode_track_state(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  VideoCodec sse_decode_video_codec(SseDeserializer deserializer);

  @protected
  VideoCodecInfo sse_decode_video_codec_info(SseDeserializer deserializer);

  @protected
  VideoConstraints sse_decode_video_constraints(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ArcPeerConnection(
      ArcPeerConnection self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ArcRtpEncodingParameters(
      ArcRtpEncodingParameters self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ArcRtpParameters(
      ArcRtpParameters self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ArcRtpTransceiver(
      ArcRtpTransceiver self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_peer_connection_event_Sse(
      RustStreamSink<PeerConnectionEvent> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_texture_event_Sse(
      RustStreamSink<TextureEvent> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_track_event_Sse(
      RustStreamSink<TrackEvent> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_unit_Sse(
      RustStreamSink<void> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_audio_constraints(
      AudioConstraints self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_audio_constraints(
      AudioConstraints self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_get_media_error(
      GetMediaError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ice_candidate_stats(
      IceCandidateStats self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ice_role(IceRole self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_media_stream_constraints(
      MediaStreamConstraints self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_protocol(Protocol self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtc_configuration(
      RtcConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtc_ice_candidate_stats(
      RtcIceCandidateStats self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtc_inbound_rtp_stream_media_type(
      RtcInboundRtpStreamMediaType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtc_media_source_stats_media_type(
      RtcMediaSourceStatsMediaType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtc_outbound_rtp_stream_stats_media_type(
      RtcOutboundRtpStreamStatsMediaType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtc_rtp_send_parameters(
      RtcRtpSendParameters self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtc_track_event(
      RtcTrackEvent self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtcp_feedback_message_type(
      RtcpFeedbackMessageType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rtp_transceiver_init(
      RtpTransceiverInit self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_video_constraints(
      VideoConstraints self, SseSerializer serializer);

  @protected
  void sse_encode_bundle_policy(BundlePolicy self, SseSerializer serializer);

  @protected
  void sse_encode_candidate_type(CandidateType self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_get_media_error(GetMediaError self, SseSerializer serializer);

  @protected
  void sse_encode_get_media_result(
      GetMediaResult self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_ice_candidate_stats(
      IceCandidateStats self, SseSerializer serializer);

  @protected
  void sse_encode_ice_connection_state(
      IceConnectionState self, SseSerializer serializer);

  @protected
  void sse_encode_ice_gathering_state(
      IceGatheringState self, SseSerializer serializer);

  @protected
  void sse_encode_ice_role(IceRole self, SseSerializer serializer);

  @protected
  void sse_encode_ice_transports_type(
      IceTransportsType self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_media_device_info(
      List<MediaDeviceInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_media_display_info(
      List<MediaDisplayInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_media_stream_track(
      List<MediaStreamTrack> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void
      sse_encode_list_record_rtc_rtp_encoding_parameters_rust_opaque_arc_rtp_encoding_parameters(
          List<(RtcRtpEncodingParameters, ArcRtpEncodingParameters)> self,
          SseSerializer serializer);

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer);

  @protected
  void sse_encode_list_rtc_ice_server(
      List<RtcIceServer> self, SseSerializer serializer);

  @protected
  void sse_encode_list_rtc_rtp_encoding_parameters(
      List<RtcRtpEncodingParameters> self, SseSerializer serializer);

  @protected
  void sse_encode_list_rtc_rtp_transceiver(
      List<RtcRtpTransceiver> self, SseSerializer serializer);

  @protected
  void sse_encode_list_rtc_stats(List<RtcStats> self, SseSerializer serializer);

  @protected
  void sse_encode_list_rtcp_feedback(
      List<RtcpFeedback> self, SseSerializer serializer);

  @protected
  void sse_encode_list_rtp_codec_capability(
      List<RtpCodecCapability> self, SseSerializer serializer);

  @protected
  void sse_encode_list_rtp_header_extension_capability(
      List<RtpHeaderExtensionCapability> self, SseSerializer serializer);

  @protected
  void sse_encode_list_scalability_mode(
      List<ScalabilityMode> self, SseSerializer serializer);

  @protected
  void sse_encode_list_video_codec_info(
      List<VideoCodecInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_media_device_info(
      MediaDeviceInfo self, SseSerializer serializer);

  @protected
  void sse_encode_media_device_kind(
      MediaDeviceKind self, SseSerializer serializer);

  @protected
  void sse_encode_media_display_info(
      MediaDisplayInfo self, SseSerializer serializer);

  @protected
  void sse_encode_media_stream_constraints(
      MediaStreamConstraints self, SseSerializer serializer);

  @protected
  void sse_encode_media_stream_track(
      MediaStreamTrack self, SseSerializer serializer);

  @protected
  void sse_encode_media_type(MediaType self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_audio_constraints(
      AudioConstraints? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_ice_role(
      IceRole? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_protocol(
      Protocol? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rtc_inbound_rtp_stream_media_type(
      RtcInboundRtpStreamMediaType? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rtcp_feedback_message_type(
      RtcpFeedbackMessageType? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_video_constraints(
      VideoConstraints? self, SseSerializer serializer);

  @protected
  void sse_encode_peer_connection_event(
      PeerConnectionEvent self, SseSerializer serializer);

  @protected
  void sse_encode_peer_connection_state(
      PeerConnectionState self, SseSerializer serializer);

  @protected
  void sse_encode_protocol(Protocol self, SseSerializer serializer);

  @protected
  void
      sse_encode_record_rtc_rtp_encoding_parameters_rust_opaque_arc_rtp_encoding_parameters(
          (RtcRtpEncodingParameters, ArcRtpEncodingParameters) self,
          SseSerializer serializer);

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_configuration(
      RtcConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_ice_candidate_stats(
      RtcIceCandidateStats self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_ice_server(RtcIceServer self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_inbound_rtp_stream_media_type(
      RtcInboundRtpStreamMediaType self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_media_source_stats_media_type(
      RtcMediaSourceStatsMediaType self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_outbound_rtp_stream_stats_media_type(
      RtcOutboundRtpStreamStatsMediaType self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_rtp_encoding_parameters(
      RtcRtpEncodingParameters self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_rtp_send_parameters(
      RtcRtpSendParameters self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_rtp_transceiver(
      RtcRtpTransceiver self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_session_description(
      RtcSessionDescription self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_stats(RtcStats self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_stats_ice_candidate_pair_state(
      RtcStatsIceCandidatePairState self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_stats_type(RtcStatsType self, SseSerializer serializer);

  @protected
  void sse_encode_rtc_track_event(RtcTrackEvent self, SseSerializer serializer);

  @protected
  void sse_encode_rtcp_feedback(RtcpFeedback self, SseSerializer serializer);

  @protected
  void sse_encode_rtcp_feedback_message_type(
      RtcpFeedbackMessageType self, SseSerializer serializer);

  @protected
  void sse_encode_rtcp_feedback_type(
      RtcpFeedbackType self, SseSerializer serializer);

  @protected
  void sse_encode_rtp_capabilities(
      RtpCapabilities self, SseSerializer serializer);

  @protected
  void sse_encode_rtp_codec_capability(
      RtpCodecCapability self, SseSerializer serializer);

  @protected
  void sse_encode_rtp_header_extension_capability(
      RtpHeaderExtensionCapability self, SseSerializer serializer);

  @protected
  void sse_encode_rtp_transceiver_direction(
      RtpTransceiverDirection self, SseSerializer serializer);

  @protected
  void sse_encode_rtp_transceiver_init(
      RtpTransceiverInit self, SseSerializer serializer);

  @protected
  void sse_encode_scalability_mode(
      ScalabilityMode self, SseSerializer serializer);

  @protected
  void sse_encode_sdp_type(SdpType self, SseSerializer serializer);

  @protected
  void sse_encode_signaling_state(
      SignalingState self, SseSerializer serializer);

  @protected
  void sse_encode_texture_event(TextureEvent self, SseSerializer serializer);

  @protected
  void sse_encode_track_event(TrackEvent self, SseSerializer serializer);

  @protected
  void sse_encode_track_state(TrackState self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_video_codec(VideoCodec self, SseSerializer serializer);

  @protected
  void sse_encode_video_codec_info(
      VideoCodecInfo self, SseSerializer serializer);

  @protected
  void sse_encode_video_constraints(
      VideoConstraints self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  void rust_arc_increment_strong_count_RustOpaque_ArcPeerConnection(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ArcPeerConnection(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ArcPeerConnectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_medea_flutter_webrtc_rust_arc_increment_strong_count_RustOpaque_ArcPeerConnection');
  late final _rust_arc_increment_strong_count_RustOpaque_ArcPeerConnection =
      _rust_arc_increment_strong_count_RustOpaque_ArcPeerConnectionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ArcPeerConnection(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ArcPeerConnection(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ArcPeerConnectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_medea_flutter_webrtc_rust_arc_decrement_strong_count_RustOpaque_ArcPeerConnection');
  late final _rust_arc_decrement_strong_count_RustOpaque_ArcPeerConnection =
      _rust_arc_decrement_strong_count_RustOpaque_ArcPeerConnectionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ArcRtpEncodingParameters(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ArcRtpEncodingParameters(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ArcRtpEncodingParametersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_medea_flutter_webrtc_rust_arc_increment_strong_count_RustOpaque_ArcRtpEncodingParameters');
  late final _rust_arc_increment_strong_count_RustOpaque_ArcRtpEncodingParameters =
      _rust_arc_increment_strong_count_RustOpaque_ArcRtpEncodingParametersPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ArcRtpEncodingParameters(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ArcRtpEncodingParameters(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ArcRtpEncodingParametersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_medea_flutter_webrtc_rust_arc_decrement_strong_count_RustOpaque_ArcRtpEncodingParameters');
  late final _rust_arc_decrement_strong_count_RustOpaque_ArcRtpEncodingParameters =
      _rust_arc_decrement_strong_count_RustOpaque_ArcRtpEncodingParametersPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ArcRtpParameters(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ArcRtpParameters(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ArcRtpParametersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_medea_flutter_webrtc_rust_arc_increment_strong_count_RustOpaque_ArcRtpParameters');
  late final _rust_arc_increment_strong_count_RustOpaque_ArcRtpParameters =
      _rust_arc_increment_strong_count_RustOpaque_ArcRtpParametersPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ArcRtpParameters(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ArcRtpParameters(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ArcRtpParametersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_medea_flutter_webrtc_rust_arc_decrement_strong_count_RustOpaque_ArcRtpParameters');
  late final _rust_arc_decrement_strong_count_RustOpaque_ArcRtpParameters =
      _rust_arc_decrement_strong_count_RustOpaque_ArcRtpParametersPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ArcRtpTransceiver(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ArcRtpTransceiver(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ArcRtpTransceiverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_medea_flutter_webrtc_rust_arc_increment_strong_count_RustOpaque_ArcRtpTransceiver');
  late final _rust_arc_increment_strong_count_RustOpaque_ArcRtpTransceiver =
      _rust_arc_increment_strong_count_RustOpaque_ArcRtpTransceiverPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ArcRtpTransceiver(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ArcRtpTransceiver(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ArcRtpTransceiverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_medea_flutter_webrtc_rust_arc_decrement_strong_count_RustOpaque_ArcRtpTransceiver');
  late final _rust_arc_decrement_strong_count_RustOpaque_ArcRtpTransceiver =
      _rust_arc_decrement_strong_count_RustOpaque_ArcRtpTransceiverPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}
