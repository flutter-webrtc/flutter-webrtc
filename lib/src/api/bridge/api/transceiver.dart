// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../frb_generated.dart';
import '../lib.dart';
import 'media_stream_track/media_type.dart';
import 'rtc_rtp_encoding_parameters.dart';
import 'transceiver/direction.dart';
import 'transceiver/init.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`

/// Creates a new [`RtcRtpTransceiver`] and adds it to the set of transceivers
/// of the specified [`PeerConnection`].
Future<RtcRtpTransceiver> addTransceiver({
  required ArcPeerConnection peer,
  required MediaType mediaType,
  required RtpTransceiverInit init,
}) => RustLib.instance.api.crateApiTransceiverAddTransceiver(
  peer: peer,
  mediaType: mediaType,
  init: init,
);

/// Returns a sequence of [`RtcRtpTransceiver`] objects representing the RTP
/// transceivers currently attached to the specified [`PeerConnection`].
Future<List<RtcRtpTransceiver>> getTransceivers({
  required ArcPeerConnection peer,
}) => RustLib.instance.api.crateApiTransceiverGetTransceivers(peer: peer);

/// Changes the preferred `direction` of the specified [`RtcRtpTransceiver`].
Future<void> setTransceiverDirection({
  required ArcRtpTransceiver transceiver,
  required RtpTransceiverDirection direction,
}) => RustLib.instance.api.crateApiTransceiverSetTransceiverDirection(
  transceiver: transceiver,
  direction: direction,
);

/// Changes the receive direction of the specified [`RtcRtpTransceiver`].
Future<void> setTransceiverRecv({
  required ArcRtpTransceiver transceiver,
  required bool recv,
}) => RustLib.instance.api.crateApiTransceiverSetTransceiverRecv(
  transceiver: transceiver,
  recv: recv,
);

/// Changes the send direction of the specified [`RtcRtpTransceiver`].
Future<void> setTransceiverSend({
  required ArcRtpTransceiver transceiver,
  required bool send,
}) => RustLib.instance.api.crateApiTransceiverSetTransceiverSend(
  transceiver: transceiver,
  send: send,
);

/// Returns the [negotiated media ID (mid)][1] of the specified
/// [`RtcRtpTransceiver`].
///
/// [1]: https://w3.org/TR/webrtc#dfn-media-stream-identification-tag
Future<String?> getTransceiverMid({required ArcRtpTransceiver transceiver}) =>
    RustLib.instance.api.crateApiTransceiverGetTransceiverMid(
      transceiver: transceiver,
    );

/// Returns the preferred direction of the specified [`RtcRtpTransceiver`].
Future<RtpTransceiverDirection> getTransceiverDirection({
  required ArcRtpTransceiver transceiver,
}) => RustLib.instance.api.crateApiTransceiverGetTransceiverDirection(
  transceiver: transceiver,
);

/// Irreversibly marks the specified [`RtcRtpTransceiver`] as stopping, unless
/// it's already stopped.
///
/// This will immediately cause the transceiver's sender to no longer send, and
/// its receiver to no longer receive.
Future<void> stopTransceiver({required ArcRtpTransceiver transceiver}) =>
    RustLib.instance.api.crateApiTransceiverStopTransceiver(
      transceiver: transceiver,
    );

/// Representation of a permanent pair of an [RTCRtpSender] and an
/// [RTCRtpReceiver], along with some shared state.
///
/// [RTCRtpSender]: https://w3.org/TR/webrtc#dom-rtcrtpsender
/// [RTCRtpReceiver]: https://w3.org/TR/webrtc#dom-rtcrtpreceiver
class RtcRtpTransceiver {
  /// [`PeerConnection`] that this [`RtcRtpTransceiver`] belongs to.
  final ArcPeerConnection peer;

  /// Rust side [`RtpTransceiver`].
  final ArcRtpTransceiver transceiver;

  /// [Negotiated media ID (mid)][1] which the local and remote peers have
  /// agreed upon to uniquely identify the [MediaStream]'s pairing of sender
  /// and receiver.
  ///
  /// [MediaStream]: https://w3.org/TR/mediacapture-streams#dom-mediastream
  /// [1]: https://w3.org/TR/webrtc#dfn-media-stream-identification-tag
  final String? mid;

  /// Preferred [`direction`][1] of this [`RtcRtpTransceiver`].
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcrtptransceiver-direction
  final RtpTransceiverDirection direction;

  const RtcRtpTransceiver({
    required this.peer,
    required this.transceiver,
    this.mid,
    required this.direction,
  });

  @override
  int get hashCode =>
      peer.hashCode ^ transceiver.hashCode ^ mid.hashCode ^ direction.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RtcRtpTransceiver &&
          runtimeType == other.runtimeType &&
          peer == other.peer &&
          transceiver == other.transceiver &&
          mid == other.mid &&
          direction == other.direction;
}
