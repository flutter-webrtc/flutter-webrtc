// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../frb_generated.dart';
import 'capability/rtp_codec.dart';
import 'capability/rtp_codec/rtcp_feedback.dart';
import 'capability/rtp_codec/scalability_mode.dart';
import 'capability/rtp_header_extension_capability.dart';
import 'media_stream_track/media_type.dart';
import 'transceiver/direction.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `from`

/// Returns the capabilities of an [RTP] sender of the provided [`MediaType`].
///
/// [RTP]: https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
Future<RtpCapabilities> getRtpSenderCapabilities({required MediaType kind}) =>
    RustLib.instance.api.crateApiCapabilityGetRtpSenderCapabilities(kind: kind);

/// Returns the capabilities of an [RTP] receiver of the provided [`MediaType`].
///
/// [RTP]: https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
Future<RtpCapabilities> getRtpReceiverCapabilities({required MediaType kind}) =>
    RustLib.instance.api.crateApiCapabilityGetRtpReceiverCapabilities(
      kind: kind,
    );

/// Representation of the static capabilities of an endpoint.
///
/// Applications can use these capabilities to construct [`RtpParameters`].
class RtpCapabilities {
  /// Supported codecs.
  final List<RtpCodecCapability> codecs;

  /// Supported [RTP] header extensions.
  ///
  /// [RTP]: https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
  final List<RtpHeaderExtensionCapability> headerExtensions;

  const RtpCapabilities({required this.codecs, required this.headerExtensions});

  @override
  int get hashCode => codecs.hashCode ^ headerExtensions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RtpCapabilities &&
          runtimeType == other.runtimeType &&
          codecs == other.codecs &&
          headerExtensions == other.headerExtensions;
}
