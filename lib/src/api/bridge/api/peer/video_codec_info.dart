// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../../frb_generated.dart';

/// Returns all [`VideoCodecInfo`]s of the supported video encoders.
Future<List<VideoCodecInfo>> videoEncoders() =>
    RustLib.instance.api.crateApiPeerVideoCodecInfoVideoEncoders();

/// Returns all [`VideoCodecInfo`]s of the supported video decoders.
Future<List<VideoCodecInfo>> videoDecoders() =>
    RustLib.instance.api.crateApiPeerVideoCodecInfoVideoDecoders();

/// Supported video codecs.
enum VideoCodec {
  /// [AV1] AOMedia Video 1.
  ///
  /// [AV1]: https://en.wikipedia.org/wiki/AV1
  av1,

  /// [H.264] Advanced Video Coding (AVC).
  ///
  /// [H.264]: https://en.wikipedia.org/wiki/Advanced_Video_Coding
  h264,

  /// [H.265] High Efficiency Video Coding (HEVC).
  ///
  /// [H.265]: https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding
  h265,

  /// [VP8] codec.
  ///
  /// [VP8]: https://en.wikipedia.org/wiki/VP8
  vp8,

  /// [VP9] codec.
  ///
  /// [VP9]: https://en.wikipedia.org/wiki/VP9
  vp9,
}

/// [`VideoCodec`] info for encoding/decoding.
class VideoCodecInfo {
  /// Indicator whether hardware acceleration should be used.
  final bool isHardwareAccelerated;

  /// [`VideoCodec`] to be used for encoding/decoding.
  final VideoCodec codec;

  const VideoCodecInfo({
    required this.isHardwareAccelerated,
    required this.codec,
  });

  @override
  int get hashCode => isHardwareAccelerated.hashCode ^ codec.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is VideoCodecInfo &&
          runtimeType == other.runtimeType &&
          isHardwareAccelerated == other.isHardwareAccelerated &&
          codec == other.codec;
}
