// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import '../../frb_generated.dart';
import '../../lib.dart';
import '../media_stream_track.dart';
import '../media_stream_track/media_type.dart';
import '../transceiver.dart';
import '../transceiver/direction.dart';
import 'events/ice_connection_state.dart';
import 'events/ice_gathering_state.dart';
import 'events/peer_connection_state.dart';
import 'events/rtc_track_event.dart';
import 'events/signaling_state.dart';

part 'events.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`

@freezed
sealed class PeerConnectionEvent with _$PeerConnectionEvent {
  const PeerConnectionEvent._();

  /// [`PeerConnection`] has been created.
  const factory PeerConnectionEvent.peerCreated({
    /// Rust side [`PeerConnection`].
    required ArcPeerConnection peer,
  }) = PeerConnectionEvent_PeerCreated;

  /// [RTCIceCandidate][1] has been discovered.
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
  const factory PeerConnectionEvent.iceCandidate({
    /// Media stream "identification-tag" defined in [RFC 5888] for the
    /// media component the discovered [RTCIceCandidate][1] is associated
    /// with.
    ///
    /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
    /// [RFC 5888]: https://tools.ietf.org/html/rfc5888
    required String sdpMid,

    /// Index (starting at zero) of the media description in the SDP this
    /// [RTCIceCandidate][1] is associated with.
    ///
    /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
    required int sdpMlineIndex,

    /// Candidate-attribute as defined in Section 15.1 of [RFC 5245].
    ///
    /// If this [RTCIceCandidate][1] represents an end-of-candidates
    /// indication or a peer reflexive remote candidate, candidate is an
    /// empty string.
    ///
    /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
    /// [RFC 5245]: https://tools.ietf.org/html/rfc5245
    required String candidate,
  }) = PeerConnectionEvent_IceCandidate;

  /// [`PeerConnection`]'s ICE gathering state has changed.
  const factory PeerConnectionEvent.iceGatheringStateChange(
    IceGatheringState field0,
  ) = PeerConnectionEvent_IceGatheringStateChange;

  /// Failure occurred when gathering [RTCIceCandidate][1].
  ///
  /// [1]: https://w3.org/TR/webrtc#dom-rtcicecandidate
  const factory PeerConnectionEvent.iceCandidateError({
    /// Local IP address used to communicate with the STUN or TURN server.
    required String address,

    /// Port used to communicate with the STUN or TURN server.
    required int port,

    /// STUN or TURN URL identifying the STUN or TURN server for which the
    /// failure occurred.
    required String url,

    /// Numeric STUN error code returned by the STUN or TURN server
    /// [`STUN-PARAMETERS`][1].
    ///
    /// If no host candidate can reach the server, it will be set to the
    /// value `701` which is outside the STUN error code range.
    ///
    /// [1]: https://tinyurl.com/stun-parameters-6
    required int errorCode,

    /// STUN reason text returned by the STUN or TURN server
    /// [`STUN-PARAMETERS`][1].
    ///
    /// If the server could not be reached, it will be set to an
    /// implementation-specific value providing details about the error.
    ///
    /// [1]: https://tinyurl.com/stun-parameters-6
    required String errorText,
  }) = PeerConnectionEvent_IceCandidateError;

  /// Negotiation or renegotiation of the [`PeerConnection`] needs to be
  /// performed.
  const factory PeerConnectionEvent.negotiationNeeded() =
      PeerConnectionEvent_NegotiationNeeded;

  /// [`PeerConnection`]'s [`SignalingState`] has been changed.
  const factory PeerConnectionEvent.signallingChange(SignalingState field0) =
      PeerConnectionEvent_SignallingChange;

  /// [`PeerConnection`]'s [`IceConnectionState`] has been changed.
  const factory PeerConnectionEvent.iceConnectionStateChange(
    IceConnectionState field0,
  ) = PeerConnectionEvent_IceConnectionStateChange;

  /// [`PeerConnection`]'s [`PeerConnectionState`] has been changed.
  const factory PeerConnectionEvent.connectionStateChange(
    PeerConnectionState field0,
  ) = PeerConnectionEvent_ConnectionStateChange;

  /// New incoming media has been negotiated.
  const factory PeerConnectionEvent.track(RtcTrackEvent field0) =
      PeerConnectionEvent_Track;
}
