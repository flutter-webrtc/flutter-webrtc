// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import '../../frb_generated.dart';

part 'rtc_inbound_rtp_stream_media_type.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`

@freezed
sealed class RtcInboundRtpStreamMediaType with _$RtcInboundRtpStreamMediaType {
  const RtcInboundRtpStreamMediaType._();

  /// `audio` media type fields.
  const factory RtcInboundRtpStreamMediaType.audio({
    /// Indicator whether the last RTP packet whose frame was delivered to
    /// the [RTCRtpReceiver]'s [MediaStreamTrack][1] for playout contained
    /// voice activity or not based on the presence of the V bit in the
    /// extension header, as defined in [RFC 6464].
    ///
    /// [RTCRtpReceiver]: https://w3.org/TR/webrtc#rtcrtpreceiver-interface
    /// [RFC 6464]: https://tools.ietf.org/html/rfc6464#page-3
    /// [1]: https://w3.org/TR/mediacapture-streams#mediastreamtrack
    bool? voiceActivityFlag,

    /// Total number of samples that have been received on this RTP stream.
    /// This includes [concealedSamples].
    ///
    /// [concealedSamples]: https://tinyurl.com/s6c4qe4
    BigInt? totalSamplesReceived,

    /// Total number of samples that are concealed samples.
    ///
    /// A concealed sample is a sample that was replaced with synthesized
    /// samples generated locally before being played out.
    /// Examples of samples that have to be concealed are samples from lost
    /// packets (reported in [packetsLost]) or samples from packets that
    /// arrive too late to be played out (reported in [packetsDiscarded]).
    ///
    /// [packetsLost]: https://tinyurl.com/u2gq965
    /// [packetsDiscarded]: https://tinyurl.com/yx7qyox3
    BigInt? concealedSamples,

    /// Total number of concealed samples inserted that are "silent".
    ///
    /// Playing out silent samples results in silence or comfort noise.
    /// This is a subset of [concealedSamples].
    ///
    /// [concealedSamples]: https://tinyurl.com/s6c4qe4
    BigInt? silentConcealedSamples,

    /// Audio level of the receiving track.
    double? audioLevel,

    /// Audio energy of the receiving track.
    double? totalAudioEnergy,

    /// Audio duration of the receiving track.
    ///
    /// For audio durations of tracks attached locally, see
    /// [RTCAudioSourceStats][1] instead.
    ///
    /// [1]: https://w3.org/TR/webrtc-stats#dom-rtcaudiosourcestats
    double? totalSamplesDuration,
  }) = RtcInboundRtpStreamMediaType_Audio;

  /// `video` media type fields.
  const factory RtcInboundRtpStreamMediaType.video({
    /// Total number of frames correctly decoded for this RTP stream, i.e.
    /// frames that would be displayed if no frames are dropped.
    int? framesDecoded,

    /// Total number of key frames, such as key frames in VP8 [RFC 6386] or
    /// IDR-frames in H.264 [RFC 6184], successfully decoded for this RTP
    /// media stream.
    ///
    /// This is a subset of [framesDecoded].
    /// [framesDecoded] - [keyFramesDecoded] gives you the number of delta
    /// frames decoded.
    ///
    /// [RFC 6386]: https://w3.org/TR/webrtc-stats#bib-rfc6386
    /// [RFC 6184]: https://w3.org/TR/webrtc-stats#bib-rfc6184
    /// [framesDecoded]: https://tinyurl.com/srfwrwt
    /// [keyFramesDecoded]: https://tinyurl.com/qtdmhtm
    int? keyFramesDecoded,

    /// Width of the last decoded frame.
    ///
    /// Before the first frame is decoded this attribute is missing.
    int? frameWidth,

    /// Height of the last decoded frame.
    ///
    /// Before the first frame is decoded this attribute is missing.
    int? frameHeight,

    /// Sum of the interframe delays in seconds between consecutively
    /// decoded frames, recorded just after a frame has been decoded.
    double? totalInterFrameDelay,

    /// Number of decoded frames in the last second.
    double? framesPerSecond,

    /// Total number of Full Intra Request (FIR) packets sent by this
    /// receiver.
    int? firCount,

    /// Total number of Picture Loss Indication (PLI) packets sent by this
    /// receiver.
    int? pliCount,

    /// Total number of Slice Loss Indication (SLI) packets sent by this
    /// receiver.
    int? sliCount,

    /// Number of concealment events.
    ///
    /// This counter increases every time a concealed sample is synthesized
    /// after a non-concealed sample. That is, multiple consecutive
    /// concealed samples will increase the [concealedSamples] count
    /// multiple times but is a single concealment event.
    ///
    /// [concealedSamples]: https://tinyurl.com/s6c4qe4
    BigInt? concealmentEvents,

    /// Total number of complete frames received on this RTP stream.
    ///
    /// This metric is incremented when the complete frame is received.
    int? framesReceived,
  }) = RtcInboundRtpStreamMediaType_Video;
}
