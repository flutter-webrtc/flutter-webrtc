// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import '../frb_generated.dart';
import '../lib.dart';
import 'stats/ice_role.dart';
import 'stats/rtc_ice_candidate_stats.dart';
import 'stats/rtc_inbound_rtp_stream_media_type.dart';
import 'stats/rtc_media_source_stats_media_type.dart';
import 'stats/rtc_outbound_rtp_stream_media_type.dart';
import 'stats/rtc_stats_ice_candidate_pair_state.dart';

part 'stats.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`, `from`

/// Returns [`RtcStats`] of the [`PeerConnection`] by its ID.
Future<List<RtcStats>> getPeerStats({required ArcPeerConnection peer}) =>
    RustLib.instance.api.crateApiStatsGetPeerStats(peer: peer);

/// Represents the [stats object] constructed by inspecting a specific
/// [monitored object].
///
/// [Full doc on W3C][1].
///
/// [stats object]: https://w3.org/TR/webrtc-stats#dfn-stats-object
/// [monitored object]: https://w3.org/TR/webrtc-stats#dfn-monitored-object
/// [1]: https://w3.org/TR/webrtc#rtcstats-dictionary
class RtcStats {
  /// Unique ID that is associated with the object that was inspected to
  /// produce this [RTCStats] object.
  ///
  /// [RTCStats]: https://w3.org/TR/webrtc#dom-rtcstats
  final String id;

  /// Timestamp associated with this object.
  ///
  /// The time is relative to the UNIX epoch (Jan 1, 1970, UTC).
  ///
  /// For statistics that came from a remote source (e.g., from received RTCP
  /// packets), timestamp represents the time at which the information
  /// arrived at the local endpoint. The remote timestamp can be found in an
  /// additional field in an [`RtcStats`]-derived dictionary, if applicable.
  final PlatformInt64 timestampUs;

  /// Actual stats of these [`RtcStats`].
  ///
  /// All possible stats are described in the [`RtcStatsType`] enum.
  final RtcStatsType kind;

  const RtcStats({
    required this.id,
    required this.timestampUs,
    required this.kind,
  });

  @override
  int get hashCode => id.hashCode ^ timestampUs.hashCode ^ kind.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RtcStats &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          timestampUs == other.timestampUs &&
          kind == other.kind;
}

@freezed
sealed class RtcStatsType with _$RtcStatsType {
  const RtcStatsType._();

  /// Statistics for the media produced by a [MediaStreamTrack][1] that is
  /// currently attached to an [RTCRtpSender]. This reflects the media that is
  /// fed to the encoder after [getUserMedia()] constraints have been applied
  /// (i.e. not the raw media produced by the camera).
  ///
  /// [RTCRtpSender]: https://w3.org/TR/webrtc#rtcrtpsender-interface
  /// [getUserMedia()]: https://tinyurl.com/sngpyr6
  /// [1]: https://w3.org/TR/mediacapture-streams#mediastreamtrack
  const factory RtcStatsType.rtcMediaSourceStats({
    /// Value of the [MediaStreamTrack][1]'s ID attribute.
    ///
    /// [1]: https://w3.org/TR/mediacapture-streams#mediastreamtrack
    String? trackIdentifier,

    /// Fields which should be in these [`RtcStats`] based on their `kind`.
    required RtcMediaSourceStatsMediaType kind,
  }) = RtcStatsType_RtcMediaSourceStats;

  /// ICE remote candidate statistics related to the [RTCIceTransport]
  /// objects.
  ///
  /// A remote candidate is [deleted][1] when the [RTCIceTransport] does an
  /// ICE restart, and the candidate is no longer a member of any non-deleted
  /// candidate pair.
  ///
  /// [RTCIceTransport]: https://w3.org/TR/webrtc#dom-rtcicetransport
  /// [1]: https://w3.org/TR/webrtc-stats#dfn-deleted
  const factory RtcStatsType.rtcIceCandidateStats(RtcIceCandidateStats field0) =
      RtcStatsType_RtcIceCandidateStats;

  /// Statistics for an outbound [RTP] stream that is currently sent with
  /// [RTCPeerConnection] object.
  ///
  /// When there are multiple [RTP] streams connected to the same sender, such
  /// as when using simulcast or RTX, there will be one
  /// [RTCOutboundRtpStreamStats][5] per RTP stream, with distinct values of
  /// the [SSRC] attribute, and all these senders will have a reference to the
  /// same "sender" object (of type [RTCAudioSenderStats][1] or
  /// [RTCVideoSenderStats][2]) and "track" object (of type
  /// [RTCSenderAudioTrackAttachmentStats][3] or
  /// [RTCSenderVideoTrackAttachmentStats][4]).
  ///
  /// [RTP]: https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
  /// [RTCPeerConnection]: https://w3.org/TR/webrtc#dom-rtcpeerconnection
  /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
  /// [1]: https://w3.org/TR/webrtc-stats#dom-rtcaudiosenderstats
  /// [2]: https://w3.org/TR/webrtc-stats#dom-rtcvideosenderstats
  /// [3]: https://tinyurl.com/sefa5z4
  /// [4]: https://tinyurl.com/rkuvpl4
  /// [5]: https://w3.org/TR/webrtc-stats#dom-rtcoutboundrtpstreamstats
  const factory RtcStatsType.rtcOutboundRtpStreamStats({
    /// ID of the stats object representing the current track attachment to
    /// the sender of the stream.
    String? trackId,

    /// Fields which should be in these [`RtcStats`] based on their
    /// `media_type`.
    required RtcOutboundRtpStreamStatsMediaType mediaType,

    /// Total number of bytes sent for this [SSRC].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    BigInt? bytesSent,

    /// Total number of RTP packets sent for this [SSRC].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    int? packetsSent,

    /// ID of the stats object representing the track currently attached to
    /// the sender of the stream.
    String? mediaSourceId,
  }) = RtcStatsType_RtcOutboundRtpStreamStats;

  /// Statistics for an inbound [RTP] stream that is currently received with
  /// [RTCPeerConnection] object.
  ///
  /// [RTP]: https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
  /// [RTCPeerConnection]: https://w3.org/TR/webrtc#dom-rtcpeerconnection
  const factory RtcStatsType.rtcInboundRtpStreamStats({
    /// ID of the stats object representing the receiving track.
    String? remoteId,

    /// Total number of bytes received for this [SSRC].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    BigInt? bytesReceived,

    /// Total number of RTP data packets received for this [SSRC].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    int? packetsReceived,

    /// Total number of RTP data packets for this [SSRC] that have been lost
    /// since the beginning of reception.
    ///
    /// This number is defined to be the number of packets expected less the
    /// number of packets actually received, where the number of packets
    /// received includes any which are late or duplicates. Thus, packets
    /// that arrive late are not counted as lost, and the loss
    /// **may be negative** if there are duplicates.
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    BigInt? packetsLost,

    /// Packet jitter measured in seconds for this [SSRC].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    double? jitter,

    /// Total number of seconds that have been spent decoding the
    /// [framesDecoded] frames of the stream.
    ///
    /// The average decode time can be calculated by dividing this value
    /// with [framesDecoded]. The time it takes to decode one frame is the
    /// time passed between feeding the decoder a frame and the decoder
    /// returning decoded data for that frame.
    ///
    /// [framesDecoded]: https://tinyurl.com/srfwrwt
    double? totalDecodeTime,

    /// Total number of audio samples or video frames that have come out of
    /// the jitter buffer (increasing [jitterBufferDelay]).
    ///
    /// [jitterBufferDelay]: https://tinyurl.com/qvoojt5
    BigInt? jitterBufferEmittedCount,

    /// Fields which should be in these [`RtcStats`] based on their
    /// `media_type`.
    RtcInboundRtpStreamMediaType? mediaType,
  }) = RtcStatsType_RtcInboundRtpStreamStats;

  /// ICE candidate pair statistics related to the [RTCIceTransport] objects.
  ///
  /// A candidate pair that is not the current pair for a transport is
  /// [deleted] when the [RTCIceTransport] does an ICE restart, at the time
  /// the state changes to [new].
  ///
  /// The candidate pair that is the current pair for a transport is [deleted]
  /// after an ICE restart when the [RTCIceTransport] switches to using a
  /// candidate pair generated from the new candidates; this time doesn't
  /// correspond to any other externally observable event.
  ///
  /// [deleted]: https://w3.org/TR/webrtc-stats#dfn-deleted
  /// [new]: https://w3.org/TR/webrtc#dom-rtcicetransportstate-new
  /// [RTCIceTransport]: https://w3.org/TR/webrtc#dom-rtcicetransport
  const factory RtcStatsType.rtcIceCandidatePairStats({
    /// State of the checklist for the local and remote candidates in a
    /// pair.
    required RtcStatsIceCandidatePairState state,

    /// Related to updating the nominated flag described in
    /// [Section 7.1.3.2.4 of RFC 5245][1].
    ///
    /// [1]: https://tools.ietf.org/html/rfc5245#section-7.1.3.2.4
    bool? nominated,

    /// Total number of payload bytes sent on this candidate pair, i.e. not
    /// including headers or padding.
    BigInt? bytesSent,

    /// Total number of payload bytes received on this candidate pair, i.e.
    /// not including headers or padding.
    BigInt? bytesReceived,

    /// Sum of all round trip time measurements in seconds since the
    /// beginning of the session, based on STUN connectivity check
    /// [STUN-PATH-CHAR] responses ([responsesReceived][2]), including those
    /// that reply to requests that are sent in order to verify consent
    /// [RFC 7675].
    ///
    /// The average round trip time can be computed from
    /// [totalRoundTripTime][1] by dividing it by [responsesReceived][2].
    ///
    /// [STUN-PATH-CHAR]: https://w3.org/TR/webrtc-stats#bib-stun-path-char
    /// [RFC 7675]: https://tools.ietf.org/html/rfc7675
    /// [1]: https://tinyurl.com/tgr543a
    /// [2]: https://tinyurl.com/r3zo2um
    double? totalRoundTripTime,

    /// Latest round trip time measured in seconds, computed from both STUN
    /// connectivity checks [STUN-PATH-CHAR], including those that are sent
    /// for consent verification [RFC 7675].
    ///
    /// [STUN-PATH-CHAR]: https://w3.org/TR/webrtc-stats#bib-stun-path-char
    /// [RFC 7675]: https://tools.ietf.org/html/rfc7675
    double? currentRoundTripTime,

    /// Calculated by the underlying congestion control by combining the
    /// available bitrate for all the outgoing RTP streams using this
    /// candidate pair. The bitrate measurement does not count the size of
    /// the IP or other transport layers like TCP or UDP. It is similar to
    /// the TIAS defined in [RFC 3890], i.e. it is measured in bits per
    /// second and the bitrate is calculated over a 1 second window.
    ///
    /// Implementations that do not calculate a sender-side estimate MUST
    /// leave this undefined. Additionally, the value MUST be undefined for
    /// candidate pairs that were never used. For pairs in use, the estimate
    /// is normally no lower than the bitrate for the packets sent at
    /// [lastPacketSentTimestamp][1], but might be higher. For candidate
    /// pairs that are not currently in use but were used before,
    /// implementations MUST return undefined.
    ///
    /// [RFC 3890]: https://tools.ietf.org/html/rfc3890
    /// [1]: https://tinyurl.com/rfc72eh
    double? availableOutgoingBitrate,
  }) = RtcStatsType_RtcIceCandidatePairStats;

  /// Transport statistics related to the [RTCPeerConnection] object.
  ///
  /// [RTCPeerConnection]: https://w3.org/TR/webrtc#dom-rtcpeerconnection
  const factory RtcStatsType.rtcTransportStats({
    /// Total number of packets sent over this transport.
    BigInt? packetsSent,

    /// Total number of packets received on this transport.
    BigInt? packetsReceived,

    /// Total number of payload bytes sent on this [RTCPeerConnection], i.e.
    /// not including headers or padding.
    ///
    /// [RTCPeerConnection]: https://w3.org/TR/webrtc#dom-rtcpeerconnection
    BigInt? bytesSent,

    /// Total number of bytes received on this [RTCPeerConnection], i.e. not
    /// including headers or padding.
    ///
    /// [RTCPeerConnection]: https://w3.org/TR/webrtc#dom-rtcpeerconnection
    BigInt? bytesReceived,

    /// Set to the current value of the [role][1] of the underlying
    /// [RTCDtlsTransport][2]'s [transport][3].
    ///
    /// [1]: https://w3.org/TR/webrtc#dom-icetransport-role
    /// [2]: https://w3.org/TR/webrtc#rtcdtlstransport-interface
    /// [3]: https://w3.org/TR/webrtc#dom-rtcdtlstransport-icetransport
    IceRole? iceRole,
  }) = RtcStatsType_RtcTransportStats;

  /// Statistics for the remote endpoint's inbound [RTP] stream corresponding
  /// to an outbound stream that is currently sent with [RTCPeerConnection]
  /// object.
  ///
  /// It is measured at the remote endpoint and reported in a RTCP Receiver
  /// Report (RR) or RTCP Extended Report (XR).
  ///
  /// [RTP]: https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
  /// [RTCPeerConnection]: https://w3.org/TR/webrtc#dom-rtcpeerconnection
  const factory RtcStatsType.rtcRemoteInboundRtpStreamStats({
    /// [localId] is used for looking up the local
    /// [RTCOutboundRtpStreamStats][1] object for the same [SSRC].
    ///
    /// [localId]: https://tinyurl.com/r8uhbo9
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    /// [1]: https://w3.org/TR/webrtc-stats#dom-rtcoutboundrtpstreamstats
    String? localId,

    /// Packet jitter measured in seconds for this [SSRC].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    double? jitter,

    /// Estimated round trip time for this [SSRC] based on the RTCP
    /// timestamps in the RTCP Receiver Report (RR) and measured in seconds.
    /// Calculated as defined in [Section 6.4.1 of RFC 3550][1].
    /// If no RTCP Receiver Report is received with a DLSR value other than
    /// 0, the round trip time is left undefined.
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    /// [1]: https://tools.ietf.org/html/rfc3550#section-6.4.1
    double? roundTripTime,

    /// Fraction packet loss reported for this [SSRC].
    /// Calculated as defined in [Section 6.4.1 of RFC 3550][1] and
    /// [Appendix A.3][2].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    /// [1]: https://tools.ietf.org/html/rfc3550#section-6.4.1
    /// [2]: https://tools.ietf.org/html/rfc3550#appendix-A.3
    double? fractionLost,

    /// Total number of RTCP RR blocks received for this [SSRC].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    BigInt? reportsReceived,

    /// Total number of RTCP RR blocks received for this [SSRC] that contain
    /// a valid round trip time. This counter will increment if the
    /// [roundTripTime] is undefined.
    ///
    /// [roundTripTime]: https://tinyurl.com/ssg83hq
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    int? roundTripTimeMeasurements,
  }) = RtcStatsType_RtcRemoteInboundRtpStreamStats;

  /// Statistics for the remote endpoint's outbound [RTP] stream corresponding
  /// to an inbound stream that is currently received with [RTCPeerConnection]
  /// object.
  ///
  /// It is measured at the remote endpoint and reported in an RTCP Sender
  /// Report (SR).
  ///
  /// [RTP]: https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
  /// [RTCPeerConnection]: https://w3.org/TR/webrtc#dom-rtcpeerconnection
  const factory RtcStatsType.rtcRemoteOutboundRtpStreamStats({
    /// [localId] is used for looking up the local
    /// [RTCInboundRtpStreamStats][1] object for the same [SSRC].
    ///
    /// [localId]: https://tinyurl.com/vu9tb2e
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    /// [1]: https://w3.org/TR/webrtc-stats#dom-rtcinboundrtpstreamstats
    String? localId,

    /// [remoteTimestamp] (as [HIGHRES-TIME]) is the remote timestamp at
    /// which these statistics were sent by the remote endpoint. This
    /// differs from timestamp, which represents the time at which the
    /// statistics were generated or received by the local endpoint. The
    /// [remoteTimestamp], if present, is derived from the NTP timestamp in
    /// an RTCP Sender Report (SR) block, which reflects the remote
    /// endpoint's clock. That clock may not be synchronized with the local
    /// clock.
    ///
    /// [HIGRES-TIME]: https://w3.org/TR/webrtc-stats#bib-highres-time
    /// [remoteTimestamp]: https://tinyurl.com/rzlhs87
    double? remoteTimestamp,

    /// Total number of RTCP SR blocks sent for this [SSRC].
    ///
    /// [SSRC]: https://w3.org/TR/webrtc-stats#dfn-ssrc
    BigInt? reportsSent,
  }) = RtcStatsType_RtcRemoteOutboundRtpStreamStats;

  /// Unimplemented stats.
  const factory RtcStatsType.unimplemented() = RtcStatsType_Unimplemented;
}
