// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../../../frb_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `hash`, `hash`

/// [RTCP] feedback message intended to enable congestion control for
/// interactive real-time traffic using [RTP].
///
/// [RTCP]: https://en.wikipedia.org/wiki/RTP_Control_Protocol
/// [RTP]: https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
class RtcpFeedback {
  /// Message type of this [`RtcpFeedback`].
  final RtcpFeedbackMessageType? messageType;

  /// Kind of this [`RtcpFeedback`].
  final RtcpFeedbackType kind;

  const RtcpFeedback({this.messageType, required this.kind});

  @override
  int get hashCode => messageType.hashCode ^ kind.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RtcpFeedback &&
          runtimeType == other.runtimeType &&
          messageType == other.messageType &&
          kind == other.kind;
}

/// Possible message types of an [`RtcpFeedback`], when is type is
/// [`RtcpFeedbackType::Nack`] or [`RtcpFeedbackType::Ccm`].
enum RtcpFeedbackMessageType {
  /// Equivalent to `{ type: "nack", parameter: undefined }` in ORTC.
  genericNack,

  /// Usable with [`RtcpFeedbackType::Nack`].
  pli,

  /// Usable with [`RtcpFeedbackType::Ccm`].
  fir,
}

/// Possible types of an [`RtcpFeedback`].
enum RtcpFeedbackType {
  /// Codec control messages.
  ccm,

  /// Loss notification feedback.
  lntf,

  /// Negative acknowledgemen.
  nack,

  /// Receiver estimated maximum bitrate.
  remb,

  /// Transport wide congestion control.
  transportCc,
}
